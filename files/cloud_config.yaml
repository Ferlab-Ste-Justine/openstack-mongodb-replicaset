#cloud-config
users:
  - default
  - name: node-exporter
    system: true
    lock_passwd: true
write_files:
  #Prometheus node exporter systemd configuration
  - path: /etc/systemd/system/node-exporter.service
    owner: root:root
    permissions: "0444"
    content: |
      [Unit]
      Description="Prometheus Node Exporter"
      Wants=network-online.target
      After=network-online.target

      [Service]
      User=node-exporter
      Group=node-exporter
      Type=simple
      ExecStart=/usr/local/bin/node_exporter

      [Install]
      WantedBy=multi-user.target
  #Replicaset key file
  - path: /opt/keyfile
    owner: root:root
    permissions: "0400"
    content: ${replicaset_key}
  #Mongodb Node configuration
  - path: /opt/node-config
    owner: root:root
    permissions: "0444"
    content: |
      net:
        bindIp: 0.0.0.0
        port: 27017
      security:
        authorization: enabled
        keyFile: /opt/keyfile
      replication:
        replSetName: ${replicaset_name}
  #Mongodb Replicaset configuration
  - path: /opt/rs-config.js
    owner: root:root
    permissions: "0444"
    content: |
      const config = {
        _id : "${replicaset_name}",
        members: [
%{ for idx in range(0, replicaset_count) ~}
          {
            _id: ${idx},
            host: "mongodb-${replicaset_name}-${idx + 1}:27017",
            //It complexifies setup if we don't ensure the node that initializes the rs
            //also becomes the master when initially doing the setup
            priority: ${idx == 0 ? 1 : 0.5}
          }, 
%{ endfor ~}
        ]
      }
  #Mongodb Replicaset init scripts
  - path: /opt/setReplicaset.js
    owner: root:root
    permission: "0700"
    content: |
      //Initiate replicaset
      load('/opt/rs-config.js');
      var replicasetStatus = db.adminCommand( { replSetGetStatus: 1 } );
      while(replicasetStatus.codeName == "NotYetInitialized") {
        rs.initiate(config);
        sleep(1000);
        replicasetStatus = db.adminCommand( { replSetGetStatus: 1 } );
      }

      //Create admin user
      replicasetStatus = db.adminCommand( { replSetGetStatus: 1 } );
      while(replicasetStatus.members[0].stateStr != "PRIMARY") {
        sleep(1000);
        replicasetStatus = db.adminCommand( { replSetGetStatus: 1 } );
      }
      
      db.createUser(
        {
          user: "admin",
          pwd: "${admin_password}",
          roles: [ 
            { role: "userAdminAnyDatabase", db: "admin" },
            { role: "readWriteAnyDatabase", db: "admin" },
            { role: "dbAdminAnyDatabase", db: "admin" },
            { role: "clusterAdmin", db: "admin" }
          ]
        }
      );

      db.auth("admin", "${admin_password}");

      //equilibrate election priorities after we are done with setup
      const rs_count = ${replicaset_count};
      var idx = 0;
      var cfg = rs.conf();
      while(idx < rs_count) {
        cfg.members[idx].priority = 1;
        idx += 1;
      }
      rs.reconfig(cfg);
  #Mongodb Replicaset init scripts
  - path: /opt/setAdmin.js
    owner: root:root
    permission: "0700"
    content: |
      const replicasetStatus = db.adminCommand( { replSetGetStatus: 1 } );
      if(replicasetStatus.codeName == "NotYetInitialized") {
        var admin = db.getSiblingDB("admin");
        admin.createUser(
          {
            user: "admin",
            pwd: "${admin_password}",
            roles: [ 
              { role: "userAdminAnyDatabase", db: "admin" },
              { role: "readWriteAnyDatabase", db: "admin" },
              { role: "dbAdminAnyDatabase", db: "admin" },
              { role: "clusterAdmin", db: "admin" }
            ]
          }
        )
      }
  - path: /opt/setReplicaset.sh
    owner: root:root
    permission: "0700"
    content: |
      #!/bin/bash
      #Wait for domains to be defined
      REPLICA_ONE=$(dig replicaset +short A mongodb-${replicaset_name}-1)
      while [ -z "$REPLICA_ONE" ]
      do
        sleep 1
        REPLICA_ONE=$(dig replicaset +short A mongodb-${replicaset_name}-1)
      done

      #If node is tagged as the initializer, initiate the replicaset
      #MongoDB requires that only one node initalize the replicaset 
      if [ -f "/opt/replicaset-initializer" ]; then
        MONGO_UP=$(docker logs mongodb | grep "waiting for connections on port")
        while [ -z "$MONGO_UP" ]
        do
          sleep 1
          MONGO_UP=$(docker logs mongodb | grep "waiting for connections on port")
        done

        docker run --rm --network host -v /etc/hosts:/etc/hosts -v /opt/setReplicaset.js:/opt/setReplicaset.js -v /opt/rs-config.js:/opt/rs-config.js ${mongodb_image} mongo admin /opt/setReplicaset.js
        rm /opt/replicaset-initializer
      fi
      touch /opt/replicaset-setup-done
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg-agent
  - software-properties-common
  - python3-pip
runcmd:
  - pip3 install ansible==2.9.9
  #Install prometheus node exporter as a binary managed as a systemd service
  - wget -O /opt/node_exporter.tar.gz https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
  - mkdir -p /opt/node_exporter
  - tar zxvf /opt/node_exporter.tar.gz -C /opt/node_exporter
  - cp /opt/node_exporter/node_exporter-1.0.1.linux-amd64/node_exporter /usr/local/bin/node_exporter
  - chown node-exporter:node-exporter /usr/local/bin/node_exporter
  - rm -r /opt/node_exporter && rm /opt/node_exporter.tar.gz
  - systemctl enable node-exporter
  - systemctl start node-exporter
  #Install mongodb as a background docker container
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
  - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io
  - systemctl enable docker
  - docker run --rm --entrypoint="" -v /opt/keyfile:/opt/keyfile ${mongodb_image} chown mongodb /opt/keyfile
  - docker run -d --restart=always --name=mongodb --network=host -v /opt/mongodb-data:/data/db -v /opt/node-config:/opt/node-config -v /opt/keyfile:/opt/keyfile ${mongodb_image} mongod --config /opt/node-config
  #Initiate replicaset
  - chmod +x /opt/setReplicaset.sh
  - /opt/setReplicaset.sh
  - rm /opt/setReplicaset.sh /opt/setReplicaset.js